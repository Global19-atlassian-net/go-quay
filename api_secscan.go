/*
 * Quay Frontend
 *
 * This API allows you to perform many of the operations required to work with Quay repositories, users, and organizations. You can find out more at <a href=\"https://quay.io\">Quay</a>.
 *
 * API version: v1
 * Contact: support@quay.io
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package quay

import (
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"golang.org/x/net/context"
	"fmt"
)

// Linger please
var (
	_ context.Context
)

type SecscanApiService service

/* SecscanApiService
Fetches the features and vulnerabilities (if any) for a repository image.
 * @param ctx context.Context for authentication, logging, tracing, etc.
@param repository The full path of the repository. e.g. namespace/name
@param imageid The image ID
@param optional (nil or map[string]interface{}) with one or more of:
    @param "vulnerabilities" (bool) Include vulnerabilities informations
@return */
func (a *SecscanApiService) GetRepoImageSecurity(ctx context.Context, repository string, imageid string, localVarOptionals map[string]interface{}) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/repository/{repository}/image/{imageid}/security"
	localVarPath = strings.Replace(localVarPath, "{"+"repository"+"}", fmt.Sprintf("%v", repository), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"imageid"+"}", fmt.Sprintf("%v", imageid), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if err := typeCheckParameter(localVarOptionals["vulnerabilities"], "bool", "vulnerabilities"); err != nil {
		return nil, err
	}

	if localVarTempParam, localVarOk := localVarOptionals["vulnerabilities"].(bool); localVarOk {
		localVarQueryParams.Add("vulnerabilities", parameterToString(localVarTempParam, ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}
	defer localVarHttpResponse.Body.Close()
	if localVarHttpResponse.StatusCode >= 300 {
		bodyBytes, _ := ioutil.ReadAll(localVarHttpResponse.Body)
		return localVarHttpResponse, reportError("Status: %v, Body: %s", localVarHttpResponse.Status, bodyBytes)
	}
	return localVarHttpResponse, err
}

/* SecscanApiService

 * @param ctx context.Context for authentication, logging, tracing, etc.
@param manifestref The digest of the manifest
@param repository The full path of the repository. e.g. namespace/name
@param optional (nil or map[string]interface{}) with one or more of:
    @param "vulnerabilities" (bool) Include vulnerabilities informations
@return */
func (a *SecscanApiService) GetRepoManifestSecurity(ctx context.Context, manifestref string, repository string, localVarOptionals map[string]interface{}) (*http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/api/v1/repository/{repository}/manifest/{manifestref}/security"
	localVarPath = strings.Replace(localVarPath, "{"+"manifestref"+"}", fmt.Sprintf("%v", manifestref), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"repository"+"}", fmt.Sprintf("%v", repository), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if err := typeCheckParameter(localVarOptionals["vulnerabilities"], "bool", "vulnerabilities"); err != nil {
		return nil, err
	}

	if localVarTempParam, localVarOk := localVarOptionals["vulnerabilities"].(bool); localVarOk {
		localVarQueryParams.Add("vulnerabilities", parameterToString(localVarTempParam, ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarHttpResponse, err
	}
	defer localVarHttpResponse.Body.Close()
	if localVarHttpResponse.StatusCode >= 300 {
		bodyBytes, _ := ioutil.ReadAll(localVarHttpResponse.Body)
		return localVarHttpResponse, reportError("Status: %v, Body: %s", localVarHttpResponse.Status, bodyBytes)
	}
	return localVarHttpResponse, err
}
