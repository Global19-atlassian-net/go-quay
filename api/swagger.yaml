---
swagger: "2.0"
info:
  description: "This API allows you to perform many of the operations required to\
    \ work with Quay repositories, users, and organizations. You can find out more\
    \ at <a href=\"https://quay.io\">Quay</a>."
  version: "v1"
  title: "Quay Frontend"
  termsOfService: "https://quay.io/tos"
  contact:
    email: "support@quay.io"
host: "quay.io"
basePath: "/"
tags:
- name: "billing"
  description: "Billing information, subscriptions, and plan information."
- name: "build"
  description: "Create, list, cancel and get status/logs of repository builds."
- name: "discovery"
  description: "API discovery information."
- name: "error"
  description: "Error details API"
- name: "globalmessages"
  description: "Messages API."
- name: "image"
  description: "List and lookup repository images."
- name: "logs"
  description: "Access usage logs for organizations or repositories."
- name: "manifest"
  description: "Manage the manifests of a repository."
- name: "organization"
  description: "Manage organizations, members and OAuth applications."
- name: "permission"
  description: "Manage repository permissions."
- name: "prototype"
  description: "Manage default permissions added to repositories."
- name: "repository"
  description: "List, create and manage repositories."
- name: "repositorynotification"
  description: "List, create and manage repository events/notifications."
- name: "repotoken"
  description: "Manage repository access tokens (DEPRECATED)."
- name: "robot"
  description: "Manage user and organization robot accounts."
- name: "search"
  description: "Conduct searches against all registry context."
- name: "secscan"
  description: "List and manage repository vulnerabilities and other security information."
- name: "signing"
  description: "List and manage repository signing information"
- name: "tag"
  description: "Manage the tags of a repository."
- name: "team"
  description: "Create, list and manage an organization's teams."
- name: "trigger"
  description: "Create, list and manage build triggers."
- name: "user"
  description: "Manage the current user."
- name: "userfiles"
  description: ""
schemes:
- "https"
paths:
  /api/v1/organization/{orgname}/invoices:
    get:
      tags:
      - "billing"
      description: "List the invoices for the specified orgnaization."
      operationId: "listOrgInvoices"
      parameters:
      - name: "orgname"
        in: "path"
        description: "The name of the organization"
        required: true
        type: "string"
        x-exportParamName: "Orgname"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "org:admin"
    x-name: "endpoints.api.billing.OrganizationInvoiceList"
    x-tag: "billing"
    x-path: "/api/v1/organization/{orgname}/invoices"
  /api/v1/plans/:
    get:
      tags:
      - "billing"
      description: "List the avaialble plans."
      operationId: "listPlans"
      parameters: []
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
    x-name: "endpoints.api.billing.ListPlans"
    x-tag: "billing"
    x-path: "/api/v1/plans/"
  /api/v1/repository/{repository}/build/:
    get:
      tags:
      - "build"
      description: "Get the list of repository builds."
      operationId: "getRepoBuilds"
      parameters:
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      - name: "since"
        in: "query"
        description: "Returns all builds since the given unix timecode"
        required: false
        type: "integer"
        x-exportParamName: "Since"
      - name: "limit"
        in: "query"
        description: "The maximum number of builds to return"
        required: false
        type: "integer"
        x-exportParamName: "Limit"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:read"
    post:
      tags:
      - "build"
      description: "Request that a repository be built and pushed from the specified\
        \ input."
      operationId: "requestRepoBuild"
      parameters:
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      - in: "body"
        name: "body"
        description: "Request body contents."
        required: true
        schema:
          $ref: "#/definitions/RepositoryBuildRequest"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Successful creation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:write"
    x-name: "endpoints.api.build.RepositoryBuildList"
    x-path: "/api/v1/repository/{repository}/build/"
    x-tag: "build"
  /api/v1/repository/{repository}/build/{build_uuid}/status:
    get:
      tags:
      - "build"
      description: "Return the status for the builds specified by the build uuids."
      operationId: "getRepoBuildStatus"
      parameters:
      - name: "build_uuid"
        in: "path"
        description: "The UUID of the build"
        required: true
        type: "string"
        x-exportParamName: "BuildUuid"
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:read"
    x-name: "endpoints.api.build.RepositoryBuildStatus"
    x-tag: "build"
    x-path: "/api/v1/repository/{repository}/build/{build_uuid}/status"
  /api/v1/repository/{repository}/build/{build_uuid}:
    get:
      tags:
      - "build"
      description: "Returns information about a build."
      operationId: "getRepoBuild"
      parameters:
      - name: "build_uuid"
        in: "path"
        description: "The UUID of the build"
        required: true
        type: "string"
        x-exportParamName: "BuildUuid"
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:read"
    delete:
      tags:
      - "build"
      description: "Cancels a repository build."
      operationId: "cancelRepoBuild"
      parameters:
      - name: "build_uuid"
        in: "path"
        description: "The UUID of the build"
        required: true
        type: "string"
        x-exportParamName: "BuildUuid"
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      responses:
        204:
          description: "Deleted"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:admin"
    x-name: "endpoints.api.build.RepositoryBuildResource"
    x-path: "/api/v1/repository/{repository}/build/{build_uuid}"
    x-tag: "build"
  /api/v1/repository/{repository}/build/{build_uuid}/logs:
    get:
      tags:
      - "build"
      description: "Return the build logs for the build specified by the build uuid."
      operationId: "getRepoBuildLogs"
      parameters:
      - name: "build_uuid"
        in: "path"
        description: "The UUID of the build"
        required: true
        type: "string"
        x-exportParamName: "BuildUuid"
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:read"
    x-name: "endpoints.api.build.RepositoryBuildLogs"
    x-tag: "build"
    x-path: "/api/v1/repository/{repository}/build/{build_uuid}/logs"
  /api/v1/discovery:
    get:
      tags:
      - "discovery"
      description: "List all of the API endpoints available in the swagger API format."
      operationId: "discovery"
      parameters:
      - name: "internal"
        in: "query"
        description: "Whether to include internal APIs."
        required: false
        type: "boolean"
        x-exportParamName: "Internal"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
    x-name: "endpoints.api.discovery.DiscoveryResource"
    x-tag: "discovery"
    x-path: "/api/v1/discovery"
  /api/v1/error/{error_type}:
    get:
      tags:
      - "error"
      description: "Get a detailed description of the error"
      operationId: "getErrorDescription"
      parameters:
      - name: "error_type"
        in: "path"
        description: "The error code identifying the type of error."
        required: true
        type: "string"
        x-exportParamName: "ErrorType"
      responses:
        200:
          description: "Successful invocation"
          schema:
            $ref: "#/definitions/ApiErrorDescription"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
    x-name: "endpoints.api.error.Error"
    x-tag: "error"
    x-path: "/api/v1/error/{error_type}"
  /api/v1/messages:
    get:
      tags:
      - "globalmessages"
      description: "Return a super users messages"
      operationId: "getGlobalMessages"
      parameters: []
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
    post:
      tags:
      - "globalmessages"
      description: "Create a message"
      operationId: "createGlobalMessage"
      parameters:
      - in: "body"
        name: "body"
        description: "Request body contents."
        required: true
        schema:
          $ref: "#/definitions/CreateMessage"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Successful creation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "super:user"
    x-name: "endpoints.api.globalmessages.GlobalUserMessages"
    x-tag: "globalmessages"
    x-path: "/api/v1/messages"
  /api/v1/repository/{repository}/image/{image_id}:
    get:
      tags:
      - "image"
      description: "Get the information available for the specified image."
      operationId: "getImage"
      parameters:
      - name: "image_id"
        in: "path"
        description: "The Docker image ID"
        required: true
        type: "string"
        x-exportParamName: "ImageId"
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:read"
    x-name: "endpoints.api.image.RepositoryImage"
    x-tag: "image"
    x-path: "/api/v1/repository/{repository}/image/{image_id}"
  /api/v1/repository/{repository}/image/:
    get:
      tags:
      - "image"
      description: "List the images for the specified repository."
      operationId: "listRepositoryImages"
      parameters:
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:read"
    x-name: "endpoints.api.image.RepositoryImageList"
    x-tag: "image"
    x-path: "/api/v1/repository/{repository}/image/"
  /api/v1/organization/{orgname}/aggregatelogs:
    get:
      tags:
      - "logs"
      description: "Gets the aggregated logs for the specified organization."
      operationId: "getAggregateOrgLogs"
      parameters:
      - name: "orgname"
        in: "path"
        description: "The name of the organization"
        required: true
        type: "string"
        x-exportParamName: "Orgname"
      - name: "performer"
        in: "query"
        description: "Username for which to filter logs."
        required: false
        type: "string"
        x-exportParamName: "Performer"
      - name: "endtime"
        in: "query"
        description: "Latest time to which to get logs. (%m/%d/%Y %Z)"
        required: false
        type: "string"
        x-exportParamName: "Endtime"
      - name: "starttime"
        in: "query"
        description: "Earliest time from which to get logs. (%m/%d/%Y %Z)"
        required: false
        type: "string"
        x-exportParamName: "Starttime"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "org:admin"
    x-name: "endpoints.api.logs.OrgAggregateLogs"
    x-tag: "logs"
    x-path: "/api/v1/organization/{orgname}/aggregatelogs"
  /api/v1/organization/{orgname}/logs:
    get:
      tags:
      - "logs"
      description: "List the logs for the specified organization."
      operationId: "listOrgLogs"
      parameters:
      - name: "orgname"
        in: "path"
        description: "The name of the organization"
        required: true
        type: "string"
        x-exportParamName: "Orgname"
      - name: "next_page"
        in: "query"
        description: "The page token for the next page"
        required: false
        type: "string"
        x-exportParamName: "NextPage"
      - name: "page"
        in: "query"
        description: "The page number for the logs"
        required: false
        type: "integer"
        x-exportParamName: "Page"
      - name: "performer"
        in: "query"
        description: "Username for which to filter logs."
        required: false
        type: "string"
        x-exportParamName: "Performer"
      - name: "endtime"
        in: "query"
        description: "Latest time to which to get logs. (%m/%d/%Y %Z)"
        required: false
        type: "string"
        x-exportParamName: "Endtime"
      - name: "starttime"
        in: "query"
        description: "Earliest time from which to get logs. (%m/%d/%Y %Z)"
        required: false
        type: "string"
        x-exportParamName: "Starttime"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "org:admin"
    x-name: "endpoints.api.logs.OrgLogs"
    x-tag: "logs"
    x-path: "/api/v1/organization/{orgname}/logs"
  /api/v1/repository/{repository}/logs:
    get:
      tags:
      - "logs"
      description: "List the logs for the specified repository."
      operationId: "listRepoLogs"
      parameters:
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      - name: "next_page"
        in: "query"
        description: "The page token for the next page"
        required: false
        type: "string"
        x-exportParamName: "NextPage"
      - name: "page"
        in: "query"
        description: "The page number for the logs"
        required: false
        type: "integer"
        x-exportParamName: "Page"
      - name: "endtime"
        in: "query"
        description: "Latest time to which to get logs (%m/%d/%Y %Z)"
        required: false
        type: "string"
        x-exportParamName: "Endtime"
      - name: "starttime"
        in: "query"
        description: "Earliest time from which to get logs (%m/%d/%Y %Z)"
        required: false
        type: "string"
        x-exportParamName: "Starttime"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:admin"
    x-name: "endpoints.api.logs.RepositoryLogs"
    x-tag: "logs"
    x-path: "/api/v1/repository/{repository}/logs"
  /api/v1/user/logs:
    get:
      tags:
      - "logs"
      description: "List the logs for the current user."
      operationId: "listUserLogs"
      parameters:
      - name: "next_page"
        in: "query"
        description: "The page token for the next page"
        required: false
        type: "string"
        x-exportParamName: "NextPage"
      - name: "performer"
        in: "query"
        description: "Username for which to filter logs."
        required: false
        type: "string"
        x-exportParamName: "Performer"
      - name: "endtime"
        in: "query"
        description: "Latest time to which to get logs. (%m/%d/%Y %Z)"
        required: false
        type: "string"
        x-exportParamName: "Endtime"
      - name: "starttime"
        in: "query"
        description: "Earliest time from which to get logs. (%m/%d/%Y %Z)"
        required: false
        type: "string"
        x-exportParamName: "Starttime"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "user:admin"
    x-name: "endpoints.api.logs.UserLogs"
    x-tag: "logs"
    x-path: "/api/v1/user/logs"
  /api/v1/user/aggregatelogs:
    get:
      tags:
      - "logs"
      description: "Returns the aggregated logs for the current user."
      operationId: "getAggregateUserLogs"
      parameters:
      - name: "performer"
        in: "query"
        description: "Username for which to filter logs."
        required: false
        type: "string"
        x-exportParamName: "Performer"
      - name: "endtime"
        in: "query"
        description: "Latest time to which to get logs. (%m/%d/%Y %Z)"
        required: false
        type: "string"
        x-exportParamName: "Endtime"
      - name: "starttime"
        in: "query"
        description: "Earliest time from which to get logs. (%m/%d/%Y %Z)"
        required: false
        type: "string"
        x-exportParamName: "Starttime"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "user:admin"
    x-name: "endpoints.api.logs.UserAggregateLogs"
    x-tag: "logs"
    x-path: "/api/v1/user/aggregatelogs"
  /api/v1/repository/{repository}/aggregatelogs:
    get:
      tags:
      - "logs"
      description: "Returns the aggregated logs for the specified repository."
      operationId: "getAggregateRepoLogs"
      parameters:
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      - name: "endtime"
        in: "query"
        description: "Latest time to which to get logs (%m/%d/%Y %Z)"
        required: false
        type: "string"
        x-exportParamName: "Endtime"
      - name: "starttime"
        in: "query"
        description: "Earliest time from which to get logs (%m/%d/%Y %Z)"
        required: false
        type: "string"
        x-exportParamName: "Starttime"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:admin"
    x-name: "endpoints.api.logs.RepositoryAggregateLogs"
    x-tag: "logs"
    x-path: "/api/v1/repository/{repository}/aggregatelogs"
  /api/v1/repository/{repository}/manifest/{manifestref}/labels:
    get:
      tags:
      - "manifest"
      description: ""
      operationId: "listManifestLabels"
      parameters:
      - name: "manifestref"
        in: "path"
        description: "The digest of the manifest"
        required: true
        type: "string"
        x-exportParamName: "Manifestref"
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      - name: "filter"
        in: "query"
        description: "If specified, only labels matching the given prefix will be\
          \ returned"
        required: false
        type: "string"
        x-exportParamName: "Filter"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:read"
    post:
      tags:
      - "manifest"
      description: "Adds a new label into the tag manifest."
      operationId: "addManifestLabel"
      parameters:
      - name: "manifestref"
        in: "path"
        description: "The digest of the manifest"
        required: true
        type: "string"
        x-exportParamName: "Manifestref"
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      - in: "body"
        name: "body"
        description: "Request body contents."
        required: true
        schema:
          $ref: "#/definitions/AddLabel"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Successful creation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:write"
    x-name: "endpoints.api.manifest.RepositoryManifestLabels"
    x-path: "/api/v1/repository/{repository}/manifest/{manifestref}/labels"
    x-tag: "manifest"
  /api/v1/repository/{repository}/manifest/{manifestref}/labels/{labelid}:
    get:
      tags:
      - "manifest"
      description: "Retrieves the label with the specific ID under the manifest."
      operationId: "getManifestLabel"
      parameters:
      - name: "labelid"
        in: "path"
        description: "The ID of the label"
        required: true
        type: "string"
        x-exportParamName: "Labelid"
      - name: "manifestref"
        in: "path"
        description: "The digest of the manifest"
        required: true
        type: "string"
        x-exportParamName: "Manifestref"
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:read"
    delete:
      tags:
      - "manifest"
      description: "Deletes an existing label from a manifest."
      operationId: "deleteManifestLabel"
      parameters:
      - name: "labelid"
        in: "path"
        description: "The ID of the label"
        required: true
        type: "string"
        x-exportParamName: "Labelid"
      - name: "manifestref"
        in: "path"
        description: "The digest of the manifest"
        required: true
        type: "string"
        x-exportParamName: "Manifestref"
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      responses:
        204:
          description: "Deleted"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:write"
    x-name: "endpoints.api.manifest.ManageRepositoryManifestLabel"
    x-path: "/api/v1/repository/{repository}/manifest/{manifestref}/labels/{labelid}"
    x-tag: "manifest"
  /api/v1/organization/{orgname}/members/{membername}:
    get:
      tags:
      - "organization"
      description: "Retrieves the details of a member of the organization."
      operationId: "getOrganizationMember"
      parameters:
      - name: "orgname"
        in: "path"
        description: "The name of the organization"
        required: true
        type: "string"
        x-exportParamName: "Orgname"
      - name: "membername"
        in: "path"
        description: "The username of the organization member"
        required: true
        type: "string"
        x-exportParamName: "Membername"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "org:admin"
    delete:
      tags:
      - "organization"
      description: "Removes a member from an organization, revoking all its repository\n\
        \        priviledges and removing it from all teams in the organization."
      operationId: "removeOrganizationMember"
      parameters:
      - name: "orgname"
        in: "path"
        description: "The name of the organization"
        required: true
        type: "string"
        x-exportParamName: "Orgname"
      - name: "membername"
        in: "path"
        description: "The username of the organization member"
        required: true
        type: "string"
        x-exportParamName: "Membername"
      responses:
        204:
          description: "Deleted"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "org:admin"
    x-name: "endpoints.api.organization.OrganizationMember"
    x-path: "/api/v1/organization/{orgname}/members/{membername}"
    x-tag: "organization"
  /api/v1/organization/{orgname}:
    get:
      tags:
      - "organization"
      description: "Get the details for the specified organization"
      operationId: "getOrganization"
      parameters:
      - name: "orgname"
        in: "path"
        description: "The name of the organization"
        required: true
        type: "string"
        x-exportParamName: "Orgname"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
    put:
      tags:
      - "organization"
      description: "Change the details for the specified organization."
      operationId: "changeOrganizationDetails"
      parameters:
      - name: "orgname"
        in: "path"
        description: "The name of the organization"
        required: true
        type: "string"
        x-exportParamName: "Orgname"
      - in: "body"
        name: "body"
        description: "Request body contents."
        required: true
        schema:
          $ref: "#/definitions/UpdateOrg"
        x-exportParamName: "Body"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "org:admin"
    delete:
      tags:
      - "organization"
      description: "Deletes the specified organization."
      operationId: "deleteAdminedOrganization"
      parameters:
      - name: "orgname"
        in: "path"
        description: "The name of the organization"
        required: true
        type: "string"
        x-exportParamName: "Orgname"
      responses:
        204:
          description: "Deleted"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "org:admin"
    x-name: "endpoints.api.organization.Organization"
    x-path: "/api/v1/organization/{orgname}"
    x-tag: "organization"
  /api/v1/organization/{orgname}/applications/{client_id}:
    get:
      tags:
      - "organization"
      description: "Retrieves the application with the specified client_id under the\
        \ specified organization"
      operationId: "getOrganizationApplication"
      parameters:
      - name: "orgname"
        in: "path"
        description: "The name of the organization"
        required: true
        type: "string"
        x-exportParamName: "Orgname"
      - name: "client_id"
        in: "path"
        description: "The OAuth client ID"
        required: true
        type: "string"
        x-exportParamName: "ClientId"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "org:admin"
    put:
      tags:
      - "organization"
      description: "Updates an application under this organization."
      operationId: "updateOrganizationApplication"
      parameters:
      - name: "orgname"
        in: "path"
        description: "The name of the organization"
        required: true
        type: "string"
        x-exportParamName: "Orgname"
      - name: "client_id"
        in: "path"
        description: "The OAuth client ID"
        required: true
        type: "string"
        x-exportParamName: "ClientId"
      - in: "body"
        name: "body"
        description: "Request body contents."
        required: true
        schema:
          $ref: "#/definitions/UpdateApp"
        x-exportParamName: "Body"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "org:admin"
    delete:
      tags:
      - "organization"
      description: "Deletes the application under this organization."
      operationId: "deleteOrganizationApplication"
      parameters:
      - name: "orgname"
        in: "path"
        description: "The name of the organization"
        required: true
        type: "string"
        x-exportParamName: "Orgname"
      - name: "client_id"
        in: "path"
        description: "The OAuth client ID"
        required: true
        type: "string"
        x-exportParamName: "ClientId"
      responses:
        204:
          description: "Deleted"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "org:admin"
    x-name: "endpoints.api.organization.OrganizationApplicationResource"
    x-path: "/api/v1/organization/{orgname}/applications/{client_id}"
    x-tag: "organization"
  /api/v1/organization/:
    post:
      tags:
      - "organization"
      description: "Create a new organization."
      operationId: "createOrganization"
      parameters:
      - in: "body"
        name: "body"
        description: "Request body contents."
        required: true
        schema:
          $ref: "#/definitions/NewOrg"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Successful creation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "user:admin"
    x-name: "endpoints.api.organization.OrganizationList"
    x-tag: "organization"
    x-path: "/api/v1/organization/"
  /api/v1/app/{client_id}:
    get:
      tags:
      - "organization"
      description: "Get information on the specified application."
      operationId: "getApplicationInformation"
      parameters:
      - name: "client_id"
        in: "path"
        description: "The OAuth client ID"
        required: true
        type: "string"
        x-exportParamName: "ClientId"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
    x-name: "endpoints.api.organization.ApplicationInformation"
    x-tag: "organization"
    x-path: "/api/v1/app/{client_id}"
  /api/v1/organization/{orgname}/applications:
    get:
      tags:
      - "organization"
      description: "List the applications for the specified organization"
      operationId: "getOrganizationApplications"
      parameters:
      - name: "orgname"
        in: "path"
        description: "The name of the organization"
        required: true
        type: "string"
        x-exportParamName: "Orgname"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "org:admin"
    post:
      tags:
      - "organization"
      description: "Creates a new application under this organization."
      operationId: "createOrganizationApplication"
      parameters:
      - name: "orgname"
        in: "path"
        description: "The name of the organization"
        required: true
        type: "string"
        x-exportParamName: "Orgname"
      - in: "body"
        name: "body"
        description: "Request body contents."
        required: true
        schema:
          $ref: "#/definitions/NewApp"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Successful creation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "org:admin"
    x-name: "endpoints.api.organization.OrganizationApplications"
    x-path: "/api/v1/organization/{orgname}/applications"
    x-tag: "organization"
  /api/v1/organization/{orgname}/members:
    get:
      tags:
      - "organization"
      description: "List the human members of the specified organization."
      operationId: "getOrganizationMembers"
      parameters:
      - name: "orgname"
        in: "path"
        description: "The name of the organization"
        required: true
        type: "string"
        x-exportParamName: "Orgname"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "org:admin"
    x-name: "endpoints.api.organization.OrganizationMemberList"
    x-tag: "organization"
    x-path: "/api/v1/organization/{orgname}/members"
  /api/v1/repository/{repository}/permissions/user/:
    get:
      tags:
      - "permission"
      description: "List all user permissions."
      operationId: "listRepoUserPermissions"
      parameters:
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:admin"
    x-name: "endpoints.api.permission.RepositoryUserPermissionList"
    x-tag: "permission"
    x-path: "/api/v1/repository/{repository}/permissions/user/"
  /api/v1/repository/{repository}/permissions/team/:
    get:
      tags:
      - "permission"
      description: "List all team permission."
      operationId: "listRepoTeamPermissions"
      parameters:
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:admin"
    x-name: "endpoints.api.permission.RepositoryTeamPermissionList"
    x-tag: "permission"
    x-path: "/api/v1/repository/{repository}/permissions/team/"
  /api/v1/repository/{repository}/permissions/team/{teamname}:
    get:
      tags:
      - "permission"
      description: "Fetch the permission for the specified team."
      operationId: "getTeamPermissions"
      parameters:
      - name: "teamname"
        in: "path"
        description: "The name of the team to which the permission applies"
        required: true
        type: "string"
        x-exportParamName: "Teamname"
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:admin"
    put:
      tags:
      - "permission"
      description: "Update the existing team permission."
      operationId: "changeTeamPermissions"
      parameters:
      - name: "teamname"
        in: "path"
        description: "The name of the team to which the permission applies"
        required: true
        type: "string"
        x-exportParamName: "Teamname"
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      - in: "body"
        name: "body"
        description: "Request body contents."
        required: true
        schema:
          $ref: "#/definitions/TeamPermission"
        x-exportParamName: "Body"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:admin"
    delete:
      tags:
      - "permission"
      description: "Delete the permission for the specified team."
      operationId: "deleteTeamPermissions"
      parameters:
      - name: "teamname"
        in: "path"
        description: "The name of the team to which the permission applies"
        required: true
        type: "string"
        x-exportParamName: "Teamname"
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      responses:
        204:
          description: "Deleted"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:admin"
    x-name: "endpoints.api.permission.RepositoryTeamPermission"
    x-path: "/api/v1/repository/{repository}/permissions/team/{teamname}"
    x-tag: "permission"
  /api/v1/repository/{repository}/permissions/user/{username}:
    get:
      tags:
      - "permission"
      description: "Get the permission for the specified user."
      operationId: "getUserPermissions"
      parameters:
      - name: "username"
        in: "path"
        description: "The username of the user to which the permission applies"
        required: true
        type: "string"
        x-exportParamName: "Username"
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:admin"
    put:
      tags:
      - "permission"
      description: "Update the perimssions for an existing repository."
      operationId: "changeUserPermissions"
      parameters:
      - name: "username"
        in: "path"
        description: "The username of the user to which the permission applies"
        required: true
        type: "string"
        x-exportParamName: "Username"
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      - in: "body"
        name: "body"
        description: "Request body contents."
        required: true
        schema:
          $ref: "#/definitions/UserPermission"
        x-exportParamName: "Body"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:admin"
    delete:
      tags:
      - "permission"
      description: "Delete the permission for the user."
      operationId: "deleteUserPermissions"
      parameters:
      - name: "username"
        in: "path"
        description: "The username of the user to which the permission applies"
        required: true
        type: "string"
        x-exportParamName: "Username"
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      responses:
        204:
          description: "Deleted"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:admin"
    x-name: "endpoints.api.permission.RepositoryUserPermission"
    x-path: "/api/v1/repository/{repository}/permissions/user/{username}"
    x-tag: "permission"
  /api/v1/repository/{repository}/permissions/user/{username}/transitive:
    get:
      tags:
      - "permission"
      description: "Get the fetch the permission for the specified user."
      operationId: "getUserTransitivePermission"
      parameters:
      - name: "username"
        in: "path"
        description: "The username of the user to which the permissions apply"
        required: true
        type: "string"
        x-exportParamName: "Username"
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:admin"
    x-name: "endpoints.api.permission.RepositoryUserTransitivePermission"
    x-tag: "permission"
    x-path: "/api/v1/repository/{repository}/permissions/user/{username}/transitive"
  /api/v1/organization/{orgname}/prototypes:
    get:
      tags:
      - "prototype"
      description: "List the existing prototypes for this organization."
      operationId: "getOrganizationPrototypePermissions"
      parameters:
      - name: "orgname"
        in: "path"
        description: "The name of the organization"
        required: true
        type: "string"
        x-exportParamName: "Orgname"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "org:admin"
    post:
      tags:
      - "prototype"
      description: "Create a new permission prototype."
      operationId: "createOrganizationPrototypePermission"
      parameters:
      - name: "orgname"
        in: "path"
        description: "The name of the organization"
        required: true
        type: "string"
        x-exportParamName: "Orgname"
      - in: "body"
        name: "body"
        description: "Request body contents."
        required: true
        schema:
          $ref: "#/definitions/NewPrototype"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Successful creation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "org:admin"
    x-name: "endpoints.api.prototype.PermissionPrototypeList"
    x-path: "/api/v1/organization/{orgname}/prototypes"
    x-tag: "prototype"
  /api/v1/organization/{orgname}/prototypes/{prototypeid}:
    put:
      tags:
      - "prototype"
      description: "Update the role of an existing permission prototype."
      operationId: "updateOrganizationPrototypePermission"
      parameters:
      - name: "orgname"
        in: "path"
        description: "The name of the organization"
        required: true
        type: "string"
        x-exportParamName: "Orgname"
      - name: "prototypeid"
        in: "path"
        description: "The ID of the prototype"
        required: true
        type: "string"
        x-exportParamName: "Prototypeid"
      - in: "body"
        name: "body"
        description: "Request body contents."
        required: true
        schema:
          $ref: "#/definitions/PrototypeUpdate"
        x-exportParamName: "Body"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "org:admin"
    delete:
      tags:
      - "prototype"
      description: "Delete an existing permission prototype."
      operationId: "deleteOrganizationPrototypePermission"
      parameters:
      - name: "orgname"
        in: "path"
        description: "The name of the organization"
        required: true
        type: "string"
        x-exportParamName: "Orgname"
      - name: "prototypeid"
        in: "path"
        description: "The ID of the prototype"
        required: true
        type: "string"
        x-exportParamName: "Prototypeid"
      responses:
        204:
          description: "Deleted"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "org:admin"
    x-name: "endpoints.api.prototype.PermissionPrototype"
    x-path: "/api/v1/organization/{orgname}/prototypes/{prototypeid}"
    x-tag: "prototype"
  /api/v1/repository:
    get:
      tags:
      - "repository"
      description: "Fetch the list of repositories visible to the current user under\
        \ a variety of situations."
      operationId: "listRepos"
      parameters:
      - name: "next_page"
        in: "query"
        description: "The page token for the next page"
        required: false
        type: "string"
        x-exportParamName: "NextPage"
      - name: "repo_kind"
        in: "query"
        description: "The kind of repositories to return"
        required: false
        type: "string"
        x-exportParamName: "RepoKind"
      - name: "popularity"
        in: "query"
        description: "Whether to include the repository's popularity metric."
        required: false
        type: "boolean"
        x-exportParamName: "Popularity"
      - name: "last_modified"
        in: "query"
        description: "Whether to include when the repository was last modified."
        required: false
        type: "boolean"
        x-exportParamName: "LastModified"
      - name: "public"
        in: "query"
        description: "Adds any repositories visible to the user by virtue of being\
          \ public"
        required: false
        type: "boolean"
        x-exportParamName: "Public"
      - name: "starred"
        in: "query"
        description: "Filters the repositories returned to those starred by the user"
        required: false
        type: "boolean"
        x-exportParamName: "Starred"
      - name: "namespace"
        in: "query"
        description: "Filters the repositories returned to this namespace"
        required: false
        type: "string"
        x-exportParamName: "Namespace"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:read"
    post:
      tags:
      - "repository"
      description: "Create a new repository."
      operationId: "createRepo"
      parameters:
      - in: "body"
        name: "body"
        description: "Request body contents."
        required: true
        schema:
          $ref: "#/definitions/NewRepo"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Successful creation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:create"
    x-name: "endpoints.api.repository.RepositoryList"
    x-tag: "repository"
    x-path: "/api/v1/repository"
  /api/v1/repository/{repository}/changevisibility:
    post:
      tags:
      - "repository"
      description: "Change the visibility of a repository."
      operationId: "changeRepoVisibility"
      parameters:
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      - in: "body"
        name: "body"
        description: "Request body contents."
        required: true
        schema:
          $ref: "#/definitions/ChangeVisibility"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Successful creation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:admin"
    x-name: "endpoints.api.repository.RepositoryVisibility"
    x-tag: "repository"
    x-path: "/api/v1/repository/{repository}/changevisibility"
  /api/v1/repository/{repository}:
    get:
      tags:
      - "repository"
      description: "Fetch the specified repository."
      operationId: "getRepo"
      parameters:
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      - name: "includeStats"
        in: "query"
        description: "Whether to include action statistics"
        required: false
        type: "boolean"
        x-exportParamName: "IncludeStats"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:read"
    put:
      tags:
      - "repository"
      description: "Update the description in the specified repository."
      operationId: "updateRepo"
      parameters:
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      - in: "body"
        name: "body"
        description: "Request body contents."
        required: true
        schema:
          $ref: "#/definitions/RepoUpdate"
        x-exportParamName: "Body"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:write"
    delete:
      tags:
      - "repository"
      description: "Delete a repository."
      operationId: "deleteRepository"
      parameters:
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      responses:
        204:
          description: "Deleted"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:admin"
    x-name: "endpoints.api.repository.Repository"
    x-path: "/api/v1/repository/{repository}"
    x-tag: "repository"
  /api/v1/repository/{repository}/changetrust:
    post:
      tags:
      - "repository"
      description: "Change the visibility of a repository."
      operationId: "changeRepoTrust"
      parameters:
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      - in: "body"
        name: "body"
        description: "Request body contents."
        required: true
        schema:
          $ref: "#/definitions/ChangeRepoTrust"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Successful creation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:admin"
    x-name: "endpoints.api.repository.RepositoryTrust"
    x-tag: "repository"
    x-path: "/api/v1/repository/{repository}/changetrust"
  /api/v1/repository/{repository}/notification/{uuid}/test:
    post:
      tags:
      - "repositorynotification"
      description: "Queues a test notification for this repository."
      operationId: "testRepoNotification"
      parameters:
      - name: "uuid"
        in: "path"
        description: "The UUID of the notification"
        required: true
        type: "string"
        x-exportParamName: "Uuid"
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      responses:
        201:
          description: "Successful creation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:admin"
    x-name: "endpoints.api.repositorynotification.TestRepositoryNotification"
    x-tag: "repositorynotification"
    x-path: "/api/v1/repository/{repository}/notification/{uuid}/test"
  /api/v1/repository/{repository}/notification/:
    get:
      tags:
      - "repositorynotification"
      description: "List the notifications for the specified repository."
      operationId: "listRepoNotifications"
      parameters:
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:admin"
    post:
      tags:
      - "repositorynotification"
      description: ""
      operationId: "createRepoNotification"
      parameters:
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      - in: "body"
        name: "body"
        description: "Request body contents."
        required: true
        schema:
          $ref: "#/definitions/NotificationCreateRequest"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Successful creation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:admin"
    x-name: "endpoints.api.repositorynotification.RepositoryNotificationList"
    x-path: "/api/v1/repository/{repository}/notification/"
    x-tag: "repositorynotification"
  /api/v1/repository/{repository}/notification/{uuid}:
    get:
      tags:
      - "repositorynotification"
      description: "Get information for the specified notification."
      operationId: "getRepoNotification"
      parameters:
      - name: "uuid"
        in: "path"
        description: "The UUID of the notification"
        required: true
        type: "string"
        x-exportParamName: "Uuid"
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:admin"
    post:
      tags:
      - "repositorynotification"
      description: "Resets repository notification to 0 failures."
      operationId: "resetRepositoryNotificationFailures"
      parameters:
      - name: "uuid"
        in: "path"
        description: "The UUID of the notification"
        required: true
        type: "string"
        x-exportParamName: "Uuid"
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      responses:
        201:
          description: "Successful creation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:admin"
    delete:
      tags:
      - "repositorynotification"
      description: "Deletes the specified notification."
      operationId: "deleteRepoNotification"
      parameters:
      - name: "uuid"
        in: "path"
        description: "The UUID of the notification"
        required: true
        type: "string"
        x-exportParamName: "Uuid"
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      responses:
        204:
          description: "Deleted"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:admin"
    x-name: "endpoints.api.repositorynotification.RepositoryNotification"
    x-path: "/api/v1/repository/{repository}/notification/{uuid}"
    x-tag: "repositorynotification"
  /api/v1/repository/{repository}/tokens/:
    get:
      tags:
      - "repotoken"
      description: "List the tokens for the specified repository."
      operationId: "listRepoTokens"
      parameters:
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:admin"
    post:
      tags:
      - "repotoken"
      description: "Create a new repository token."
      operationId: "createToken"
      parameters:
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      - in: "body"
        name: "body"
        description: "Request body contents."
        required: true
        schema:
          $ref: "#/definitions/NewToken"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Successful creation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:admin"
    x-name: "endpoints.api.repotoken.RepositoryTokenList"
    x-path: "/api/v1/repository/{repository}/tokens/"
    x-tag: "repotoken"
  /api/v1/repository/{repository}/tokens/{code}:
    get:
      tags:
      - "repotoken"
      description: "Fetch the specified repository token information."
      operationId: "getTokens"
      parameters:
      - name: "code"
        in: "path"
        description: "The token code"
        required: true
        type: "string"
        x-exportParamName: "Code"
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:admin"
    put:
      tags:
      - "repotoken"
      description: "Update the permissions for the specified repository token."
      operationId: "changeToken"
      parameters:
      - name: "code"
        in: "path"
        description: "The token code"
        required: true
        type: "string"
        x-exportParamName: "Code"
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      - in: "body"
        name: "body"
        description: "Request body contents."
        required: true
        schema:
          $ref: "#/definitions/TokenPermission"
        x-exportParamName: "Body"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:admin"
    delete:
      tags:
      - "repotoken"
      description: "Delete the repository token."
      operationId: "deleteToken"
      parameters:
      - name: "code"
        in: "path"
        description: "The token code"
        required: true
        type: "string"
        x-exportParamName: "Code"
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      responses:
        204:
          description: "Deleted"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:admin"
    x-name: "endpoints.api.repotoken.RepositoryToken"
    x-path: "/api/v1/repository/{repository}/tokens/{code}"
    x-tag: "repotoken"
  /api/v1/user/robots:
    get:
      tags:
      - "robot"
      description: "List the available robots for the user."
      operationId: "getUserRobots"
      parameters:
      - name: "permissions"
        in: "query"
        description: "Whether to include repositories and teams in which the robots\
          \ have permission."
        required: false
        type: "boolean"
        x-exportParamName: "Permissions"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "user:admin"
    x-name: "endpoints.api.robot.UserRobotList"
    x-tag: "robot"
    x-path: "/api/v1/user/robots"
  /api/v1/organization/{orgname}/robots/{robot_shortname}/permissions:
    get:
      tags:
      - "robot"
      description: "Returns the list of repository permissions for the org's robot."
      operationId: "getOrgRobotPermissions"
      parameters:
      - name: "orgname"
        in: "path"
        description: "The name of the organization"
        required: true
        type: "string"
        x-exportParamName: "Orgname"
      - name: "robot_shortname"
        in: "path"
        description: "The short name for the robot, without any user or organization\
          \ prefix"
        required: true
        type: "string"
        x-exportParamName: "RobotShortname"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "user:admin"
    x-name: "endpoints.api.robot.OrgRobotPermissions"
    x-tag: "robot"
    x-path: "/api/v1/organization/{orgname}/robots/{robot_shortname}/permissions"
  /api/v1/organization/{orgname}/robots/{robot_shortname}/regenerate:
    post:
      tags:
      - "robot"
      description: "Regenerates the token for an organization robot."
      operationId: "regenerateOrgRobotToken"
      parameters:
      - name: "orgname"
        in: "path"
        description: "The name of the organization"
        required: true
        type: "string"
        x-exportParamName: "Orgname"
      - name: "robot_shortname"
        in: "path"
        description: "The short name for the robot, without any user or organization\
          \ prefix"
        required: true
        type: "string"
        x-exportParamName: "RobotShortname"
      responses:
        201:
          description: "Successful creation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "org:admin"
    x-name: "endpoints.api.robot.RegenerateOrgRobot"
    x-tag: "robot"
    x-path: "/api/v1/organization/{orgname}/robots/{robot_shortname}/regenerate"
  /api/v1/organization/{orgname}/robots:
    get:
      tags:
      - "robot"
      description: "List the organization's robots."
      operationId: "getOrgRobots"
      parameters:
      - name: "orgname"
        in: "path"
        description: "The name of the organization"
        required: true
        type: "string"
        x-exportParamName: "Orgname"
      - name: "permissions"
        in: "query"
        description: "Whether to include repostories and teams in which the robots\
          \ have permission."
        required: false
        type: "boolean"
        x-exportParamName: "Permissions"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "org:admin"
    x-name: "endpoints.api.robot.OrgRobotList"
    x-tag: "robot"
    x-path: "/api/v1/organization/{orgname}/robots"
  /api/v1/user/robots/{robot_shortname}/permissions:
    get:
      tags:
      - "robot"
      description: "Returns the list of repository permissions for the user's robot."
      operationId: "getUserRobotPermissions"
      parameters:
      - name: "robot_shortname"
        in: "path"
        description: "The short name for the robot, without any user or organization\
          \ prefix"
        required: true
        type: "string"
        x-exportParamName: "RobotShortname"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "user:admin"
    x-name: "endpoints.api.robot.UserRobotPermissions"
    x-tag: "robot"
    x-path: "/api/v1/user/robots/{robot_shortname}/permissions"
  /api/v1/user/robots/{robot_shortname}/regenerate:
    post:
      tags:
      - "robot"
      description: "Regenerates the token for a user's robot."
      operationId: "regenerateUserRobotToken"
      parameters:
      - name: "robot_shortname"
        in: "path"
        description: "The short name for the robot, without any user or organization\
          \ prefix"
        required: true
        type: "string"
        x-exportParamName: "RobotShortname"
      responses:
        201:
          description: "Successful creation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "user:admin"
    x-name: "endpoints.api.robot.RegenerateUserRobot"
    x-tag: "robot"
    x-path: "/api/v1/user/robots/{robot_shortname}/regenerate"
  /api/v1/organization/{orgname}/robots/{robot_shortname}:
    get:
      tags:
      - "robot"
      description: "Returns the organization's robot with the specified name."
      operationId: "getOrgRobot"
      parameters:
      - name: "orgname"
        in: "path"
        description: "The name of the organization"
        required: true
        type: "string"
        x-exportParamName: "Orgname"
      - name: "robot_shortname"
        in: "path"
        description: "The short name for the robot, without any user or organization\
          \ prefix"
        required: true
        type: "string"
        x-exportParamName: "RobotShortname"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "org:admin"
    put:
      tags:
      - "robot"
      description: "Create a new robot in the organization."
      operationId: "createOrgRobot"
      parameters:
      - name: "orgname"
        in: "path"
        description: "The name of the organization"
        required: true
        type: "string"
        x-exportParamName: "Orgname"
      - name: "robot_shortname"
        in: "path"
        description: "The short name for the robot, without any user or organization\
          \ prefix"
        required: true
        type: "string"
        x-exportParamName: "RobotShortname"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "org:admin"
    delete:
      tags:
      - "robot"
      description: "Delete an existing organization robot."
      operationId: "deleteOrgRobot"
      parameters:
      - name: "orgname"
        in: "path"
        description: "The name of the organization"
        required: true
        type: "string"
        x-exportParamName: "Orgname"
      - name: "robot_shortname"
        in: "path"
        description: "The short name for the robot, without any user or organization\
          \ prefix"
        required: true
        type: "string"
        x-exportParamName: "RobotShortname"
      responses:
        204:
          description: "Deleted"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "org:admin"
    x-name: "endpoints.api.robot.OrgRobot"
    x-path: "/api/v1/organization/{orgname}/robots/{robot_shortname}"
    x-tag: "robot"
  /api/v1/user/robots/{robot_shortname}:
    get:
      tags:
      - "robot"
      description: "Returns the user's robot with the specified name."
      operationId: "getUserRobot"
      parameters:
      - name: "robot_shortname"
        in: "path"
        description: "The short name for the robot, without any user or organization\
          \ prefix"
        required: true
        type: "string"
        x-exportParamName: "RobotShortname"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "user:admin"
    put:
      tags:
      - "robot"
      description: "Create a new user robot with the specified name."
      operationId: "createUserRobot"
      parameters:
      - name: "robot_shortname"
        in: "path"
        description: "The short name for the robot, without any user or organization\
          \ prefix"
        required: true
        type: "string"
        x-exportParamName: "RobotShortname"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "user:admin"
    delete:
      tags:
      - "robot"
      description: "Delete an existing robot."
      operationId: "deleteUserRobot"
      parameters:
      - name: "robot_shortname"
        in: "path"
        description: "The short name for the robot, without any user or organization\
          \ prefix"
        required: true
        type: "string"
        x-exportParamName: "RobotShortname"
      responses:
        204:
          description: "Deleted"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "user:admin"
    x-name: "endpoints.api.robot.UserRobot"
    x-path: "/api/v1/user/robots/{robot_shortname}"
    x-tag: "robot"
  /api/v1/find/all:
    get:
      tags:
      - "search"
      description: "Get a list of entities and resources that match the specified\
        \ query."
      operationId: "conductSearch"
      parameters:
      - name: "query"
        in: "query"
        description: "The search query."
        required: false
        type: "string"
        x-exportParamName: "Query"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:read"
    x-name: "endpoints.api.search.ConductSearch"
    x-tag: "search"
    x-path: "/api/v1/find/all"
  /api/v1/find/repositories:
    get:
      tags:
      - "search"
      description: "Get a list of apps and repositories that match the specified query."
      operationId: "conductRepoSearch"
      parameters:
      - name: "page"
        in: "query"
        description: "The page."
        required: false
        type: "integer"
        x-exportParamName: "Page"
      - name: "query"
        in: "query"
        description: "The search query."
        required: false
        type: "string"
        x-exportParamName: "Query"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
    x-name: "endpoints.api.search.ConductRepositorySearch"
    x-tag: "search"
    x-path: "/api/v1/find/repositories"
  /api/v1/entities/{prefix}:
    get:
      tags:
      - "search"
      description: "Get a list of entities that match the specified prefix."
      operationId: "getMatchingEntities"
      parameters:
      - name: "prefix"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Prefix"
      - name: "includeOrgs"
        in: "query"
        description: "Whether to include orgs names."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeOrgs"
      - name: "includeTeams"
        in: "query"
        description: "Whether to include team names."
        required: false
        type: "boolean"
        x-exportParamName: "IncludeTeams"
      - name: "namespace"
        in: "query"
        description: "Namespace to use when querying for org entities."
        required: false
        type: "string"
        x-exportParamName: "Namespace"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
    x-name: "endpoints.api.search.EntitySearch"
    x-tag: "search"
    x-path: "/api/v1/entities/{prefix}"
  /api/v1/repository/{repository}/manifest/{manifestref}/security:
    get:
      tags:
      - "secscan"
      description: ""
      operationId: "getRepoManifestSecurity"
      parameters:
      - name: "manifestref"
        in: "path"
        description: "The digest of the manifest"
        required: true
        type: "string"
        x-exportParamName: "Manifestref"
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      - name: "vulnerabilities"
        in: "query"
        description: "Include vulnerabilities informations"
        required: false
        type: "boolean"
        x-exportParamName: "Vulnerabilities"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:read"
    x-name: "endpoints.api.secscan.RepositoryManifestSecurity"
    x-tag: "secscan"
    x-path: "/api/v1/repository/{repository}/manifest/{manifestref}/security"
  /api/v1/repository/{repository}/image/{imageid}/security:
    get:
      tags:
      - "secscan"
      description: "Fetches the features and vulnerabilities (if any) for a repository\
        \ image."
      operationId: "getRepoImageSecurity"
      parameters:
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      - name: "imageid"
        in: "path"
        description: "The image ID"
        required: true
        type: "string"
        x-exportParamName: "Imageid"
      - name: "vulnerabilities"
        in: "query"
        description: "Include vulnerabilities informations"
        required: false
        type: "boolean"
        x-exportParamName: "Vulnerabilities"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:read"
    x-name: "endpoints.api.secscan.RepositoryImageSecurity"
    x-tag: "secscan"
    x-path: "/api/v1/repository/{repository}/image/{imageid}/security"
  /api/v1/repository/{repository}/signatures:
    get:
      tags:
      - "signing"
      description: "Fetches the list of signed tags for the repository."
      operationId: "getRepoSignatures"
      parameters:
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:read"
    x-name: "endpoints.api.signing.RepositorySignatures"
    x-tag: "signing"
    x-path: "/api/v1/repository/{repository}/signatures"
  /api/v1/repository/{repository}/tag/{tag}/images:
    get:
      tags:
      - "tag"
      description: "List the images for the specified repository tag."
      operationId: "listTagImages"
      parameters:
      - name: "tag"
        in: "path"
        description: "The name of the tag"
        required: true
        type: "string"
        x-exportParamName: "Tag"
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      - name: "owned"
        in: "query"
        description: "If specified, only images wholely owned by this tag are returned."
        required: false
        type: "boolean"
        x-exportParamName: "Owned"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:read"
    x-name: "endpoints.api.tag.RepositoryTagImages"
    x-tag: "tag"
    x-path: "/api/v1/repository/{repository}/tag/{tag}/images"
  /api/v1/repository/{repository}/tag/{tag}/restore:
    post:
      tags:
      - "tag"
      description: "Restores a repository tag back to a previous image in the repository."
      operationId: "restoreTag"
      parameters:
      - name: "tag"
        in: "path"
        description: "The name of the tag"
        required: true
        type: "string"
        x-exportParamName: "Tag"
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      - in: "body"
        name: "body"
        description: "Request body contents."
        required: true
        schema:
          $ref: "#/definitions/RestoreTag"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Successful creation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:write"
    x-name: "endpoints.api.tag.RestoreTag"
    x-tag: "tag"
    x-path: "/api/v1/repository/{repository}/tag/{tag}/restore"
  /api/v1/repository/{repository}/tag/{tag}:
    put:
      tags:
      - "tag"
      description: "Change which image a tag points to or create a new tag."
      operationId: "changeTag"
      parameters:
      - name: "tag"
        in: "path"
        description: "The name of the tag"
        required: true
        type: "string"
        x-exportParamName: "Tag"
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      - in: "body"
        name: "body"
        description: "Request body contents."
        required: true
        schema:
          $ref: "#/definitions/ChangeTag"
        x-exportParamName: "Body"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:write"
    delete:
      tags:
      - "tag"
      description: "Delete the specified repository tag."
      operationId: "deleteFullTag"
      parameters:
      - name: "tag"
        in: "path"
        description: "The name of the tag"
        required: true
        type: "string"
        x-exportParamName: "Tag"
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      responses:
        204:
          description: "Deleted"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:write"
    x-name: "endpoints.api.tag.RepositoryTag"
    x-path: "/api/v1/repository/{repository}/tag/{tag}"
    x-tag: "tag"
  /api/v1/repository/{repository}/tag/:
    get:
      tags:
      - "tag"
      description: ""
      operationId: "listRepoTags"
      parameters:
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      - name: "page"
        in: "query"
        description: "Page index for the results. Default 1."
        required: false
        type: "integer"
        x-exportParamName: "Page"
      - name: "limit"
        in: "query"
        description: "Limit to the number of results to return per page. Max 100."
        required: false
        type: "integer"
        x-exportParamName: "Limit"
      - name: "specificTag"
        in: "query"
        description: "Filters the tags to the specific tag."
        required: false
        type: "string"
        x-exportParamName: "SpecificTag"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:read"
    x-name: "endpoints.api.tag.ListRepositoryTags"
    x-tag: "tag"
    x-path: "/api/v1/repository/{repository}/tag/"
  /api/v1/organization/{orgname}/team/{teamname}/members:
    get:
      tags:
      - "team"
      description: "Retrieve the list of members for the specified team."
      operationId: "getOrganizationTeamMembers"
      parameters:
      - name: "orgname"
        in: "path"
        description: "The name of the organization"
        required: true
        type: "string"
        x-exportParamName: "Orgname"
      - name: "teamname"
        in: "path"
        description: "The name of the team"
        required: true
        type: "string"
        x-exportParamName: "Teamname"
      - name: "includePending"
        in: "query"
        description: "Whether to include pending members"
        required: false
        type: "boolean"
        x-exportParamName: "IncludePending"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "org:admin"
    x-name: "endpoints.api.team.TeamMemberList"
    x-tag: "team"
    x-path: "/api/v1/organization/{orgname}/team/{teamname}/members"
  /api/v1/organization/{orgname}/team/{teamname}/permissions:
    get:
      tags:
      - "team"
      description: "Returns the list of repository permissions for the org's team."
      operationId: "getOrganizationTeamPermissions"
      parameters:
      - name: "orgname"
        in: "path"
        description: "The name of the organization"
        required: true
        type: "string"
        x-exportParamName: "Orgname"
      - name: "teamname"
        in: "path"
        description: "The name of the team"
        required: true
        type: "string"
        x-exportParamName: "Teamname"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
    x-name: "endpoints.api.team.TeamPermissions"
    x-tag: "team"
    x-path: "/api/v1/organization/{orgname}/team/{teamname}/permissions"
  /api/v1/organization/{orgname}/team/{teamname}/invite/{email}:
    put:
      tags:
      - "team"
      description: "Invites an email address to an existing team."
      operationId: "inviteTeamMemberEmail"
      parameters:
      - name: "orgname"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Orgname"
      - name: "email"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Email"
      - name: "teamname"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Teamname"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "org:admin"
    delete:
      tags:
      - "team"
      description: "Delete an invite of an email address to join a team."
      operationId: "deleteTeamMemberEmailInvite"
      parameters:
      - name: "orgname"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Orgname"
      - name: "email"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Email"
      - name: "teamname"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Teamname"
      responses:
        204:
          description: "Deleted"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "org:admin"
    x-name: "endpoints.api.team.InviteTeamMember"
    x-tag: "team"
    x-path: "/api/v1/organization/{orgname}/team/{teamname}/invite/{email}"
  /api/v1/organization/{orgname}/team/{teamname}:
    put:
      tags:
      - "team"
      description: "Update the org-wide permission for the specified team."
      operationId: "updateOrganizationTeam"
      parameters:
      - name: "orgname"
        in: "path"
        description: "The name of the organization"
        required: true
        type: "string"
        x-exportParamName: "Orgname"
      - name: "teamname"
        in: "path"
        description: "The name of the team"
        required: true
        type: "string"
        x-exportParamName: "Teamname"
      - in: "body"
        name: "body"
        description: "Request body contents."
        required: true
        schema:
          $ref: "#/definitions/TeamDescription"
        x-exportParamName: "Body"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "org:admin"
    delete:
      tags:
      - "team"
      description: "Delete the specified team."
      operationId: "deleteOrganizationTeam"
      parameters:
      - name: "orgname"
        in: "path"
        description: "The name of the organization"
        required: true
        type: "string"
        x-exportParamName: "Orgname"
      - name: "teamname"
        in: "path"
        description: "The name of the team"
        required: true
        type: "string"
        x-exportParamName: "Teamname"
      responses:
        204:
          description: "Deleted"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "org:admin"
    x-name: "endpoints.api.team.OrganizationTeam"
    x-path: "/api/v1/organization/{orgname}/team/{teamname}"
    x-tag: "team"
  /api/v1/organization/{orgname}/team/{teamname}/members/{membername}:
    put:
      tags:
      - "team"
      description: "Adds or invites a member to an existing team."
      operationId: "updateOrganizationTeamMember"
      parameters:
      - name: "orgname"
        in: "path"
        description: "The name of the organization"
        required: true
        type: "string"
        x-exportParamName: "Orgname"
      - name: "membername"
        in: "path"
        description: "The username of the team member"
        required: true
        type: "string"
        x-exportParamName: "Membername"
      - name: "teamname"
        in: "path"
        description: "The name of the team"
        required: true
        type: "string"
        x-exportParamName: "Teamname"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "org:admin"
    delete:
      tags:
      - "team"
      description: "Delete a member of a team. If the user is merely invited to join\n\
        \        the team, then the invite is removed instead."
      operationId: "deleteOrganizationTeamMember"
      parameters:
      - name: "orgname"
        in: "path"
        description: "The name of the organization"
        required: true
        type: "string"
        x-exportParamName: "Orgname"
      - name: "membername"
        in: "path"
        description: "The username of the team member"
        required: true
        type: "string"
        x-exportParamName: "Membername"
      - name: "teamname"
        in: "path"
        description: "The name of the team"
        required: true
        type: "string"
        x-exportParamName: "Teamname"
      responses:
        204:
          description: "Deleted"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "org:admin"
    x-name: "endpoints.api.team.TeamMember"
    x-path: "/api/v1/organization/{orgname}/team/{teamname}/members/{membername}"
    x-tag: "team"
  /api/v1/repository/{repository}/trigger/:
    get:
      tags:
      - "trigger"
      description: "List the triggers for the specified repository."
      operationId: "listBuildTriggers"
      parameters:
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:admin"
    x-name: "endpoints.api.trigger.BuildTriggerList"
    x-tag: "trigger"
    x-path: "/api/v1/repository/{repository}/trigger/"
  /api/v1/repository/{repository}/trigger/{trigger_uuid}/activate:
    post:
      tags:
      - "trigger"
      description: "Activate the specified build trigger."
      operationId: "activateBuildTrigger"
      parameters:
      - name: "trigger_uuid"
        in: "path"
        description: "The UUID of the build trigger"
        required: true
        type: "string"
        x-exportParamName: "TriggerUuid"
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      - in: "body"
        name: "body"
        description: "Request body contents."
        required: true
        schema:
          $ref: "#/definitions/BuildTriggerActivateRequest"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Successful creation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:admin"
    x-name: "endpoints.api.trigger.BuildTriggerActivate"
    x-tag: "trigger"
    x-path: "/api/v1/repository/{repository}/trigger/{trigger_uuid}/activate"
  /api/v1/repository/{repository}/trigger/{trigger_uuid}/start:
    post:
      tags:
      - "trigger"
      description: "Manually start a build from the specified trigger."
      operationId: "manuallyStartBuildTrigger"
      parameters:
      - name: "trigger_uuid"
        in: "path"
        description: "The UUID of the build trigger"
        required: true
        type: "string"
        x-exportParamName: "TriggerUuid"
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      - in: "body"
        name: "body"
        description: "Request body contents."
        required: true
        schema:
          $ref: "#/definitions/RunParameters"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Successful creation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:admin"
    x-name: "endpoints.api.trigger.ActivateBuildTrigger"
    x-tag: "trigger"
    x-path: "/api/v1/repository/{repository}/trigger/{trigger_uuid}/start"
  /api/v1/repository/{repository}/trigger/{trigger_uuid}/builds:
    get:
      tags:
      - "trigger"
      description: "List the builds started by the specified trigger."
      operationId: "listTriggerRecentBuilds"
      parameters:
      - name: "trigger_uuid"
        in: "path"
        description: "The UUID of the build trigger"
        required: true
        type: "string"
        x-exportParamName: "TriggerUuid"
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      - name: "limit"
        in: "query"
        description: "The maximum number of builds to return"
        required: false
        type: "integer"
        x-exportParamName: "Limit"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:admin"
    x-name: "endpoints.api.trigger.TriggerBuildList"
    x-tag: "trigger"
    x-path: "/api/v1/repository/{repository}/trigger/{trigger_uuid}/builds"
  /api/v1/repository/{repository}/trigger/{trigger_uuid}:
    get:
      tags:
      - "trigger"
      description: "Get information for the specified build trigger."
      operationId: "getBuildTrigger"
      parameters:
      - name: "trigger_uuid"
        in: "path"
        description: "The UUID of the build trigger"
        required: true
        type: "string"
        x-exportParamName: "TriggerUuid"
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:admin"
    delete:
      tags:
      - "trigger"
      description: "Delete the specified build trigger."
      operationId: "deleteBuildTrigger"
      parameters:
      - name: "trigger_uuid"
        in: "path"
        description: "The UUID of the build trigger"
        required: true
        type: "string"
        x-exportParamName: "TriggerUuid"
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      responses:
        204:
          description: "Deleted"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:admin"
    x-name: "endpoints.api.trigger.BuildTrigger"
    x-path: "/api/v1/repository/{repository}/trigger/{trigger_uuid}"
    x-tag: "trigger"
  /api/v1/user/:
    get:
      tags:
      - "user"
      description: "Get user information for the authenticated user."
      operationId: "getLoggedInUser"
      parameters: []
      responses:
        200:
          description: "Successful invocation"
          schema:
            $ref: "#/definitions/UserView"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "user:read"
    x-name: "endpoints.api.user.User"
    x-tag: "user"
    x-path: "/api/v1/user/"
  /api/v1/users/{username}:
    get:
      tags:
      - "user"
      description: "Get user information for the specified user."
      operationId: "getUserInformation"
      parameters:
      - name: "username"
        in: "path"
        description: ""
        required: true
        type: "string"
        x-exportParamName: "Username"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
    x-name: "endpoints.api.user.Users"
    x-tag: "user"
    x-path: "/api/v1/users/{username}"
  /api/v1/user/starred:
    get:
      tags:
      - "user"
      description: "List all starred repositories."
      operationId: "listStarredRepos"
      parameters:
      - name: "next_page"
        in: "query"
        description: "The page token for the next page"
        required: false
        type: "string"
        x-exportParamName: "NextPage"
      responses:
        200:
          description: "Successful invocation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "user:admin"
    post:
      tags:
      - "user"
      description: "Star a repository."
      operationId: "createStar"
      parameters:
      - in: "body"
        name: "body"
        description: "Request body contents."
        required: true
        schema:
          $ref: "#/definitions/NewStarredRepository"
        x-exportParamName: "Body"
      responses:
        201:
          description: "Successful creation"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "repo:read"
    x-name: "endpoints.api.user.StarredRepositoryList"
    x-tag: "user"
    x-path: "/api/v1/user/starred"
  /api/v1/user/starred/{repository}:
    delete:
      tags:
      - "user"
      description: "Removes a star from a repository."
      operationId: "deleteStar"
      parameters:
      - name: "repository"
        in: "path"
        description: "The full path of the repository. e.g. namespace/name"
        required: true
        type: "string"
        x-exportParamName: "Repository"
      responses:
        204:
          description: "Deleted"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/ApiError"
        401:
          description: "Session required"
          schema:
            $ref: "#/definitions/ApiError"
        403:
          description: "Unauthorized access"
          schema:
            $ref: "#/definitions/ApiError"
        404:
          description: "Not found"
          schema:
            $ref: "#/definitions/ApiError"
      security:
      - oauth2_implicit:
        - "user:admin"
    x-name: "endpoints.api.user.StarredRepository"
    x-tag: "user"
    x-path: "/api/v1/user/starred/{repository}"
  /userfiles/{file_id}:
    x-name: "data.userfiles.UserfilesHandlers"
    x-tag: "userfiles"
    x-path: "/userfiles/{file_id}"
securityDefinitions:
  oauth2_implicit:
    type: "oauth2"
    authorizationUrl: "https://quay.io/oauth/authorize"
    flow: "implicit"
    scopes:
      repo:write: "This application will be able to view, push and pull to all repositories\
        \ to which the granting user or robot account has write access"
      repo:read: "This application will be able to view and pull all repositories\
        \ visible to the granting user or robot account"
      repo:create: "This application will be able to create repositories in to any\
        \ namespaces that the granting user or robot account is allowed to create\
        \ repositories"
      repo:admin: "This application will have administrator access to all repositories\
        \ to which the granting user or robot account has access"
      user:admin: "This application will be able to administer your account including\
        \ creating robots and granting them permissions to your repositories. You\
        \ should have absolute trust in the requesting application before granting\
        \ this permission."
      org:admin: "This application will be able to administer your organizations including\
        \ creating robots, creating teams, adjusting team membership, and changing\
        \ billing settings. You should have absolute trust in the requesting application\
        \ before granting this permission."
      user:read: "This application will be able to read user information such as username\
        \ and email address."
definitions:
  RepositoryBuildRequest:
    type: "object"
    properties:
      subdirectory:
        type: "string"
        description: "Subdirectory in which the Dockerfile can be found. You can only\
          \ specify this or dockerfile_path"
      archive_url:
        type: "string"
        description: "The URL of the .tar.gz to build. Must start with \"http\" or\
          \ \"https\"."
      docker_tags:
        type: "array"
        description: "The tags to which the built images will be pushed. If none specified,\
          \ \"latest\" is used."
        uniqueItems: true
        items:
          type: "string"
        minItems: 1
      pull_robot:
        type: "string"
        description: "Username of a Quay robot account to use as pull credentials"
      file_id:
        type: "string"
        description: "The file id that was generated when the build spec was uploaded"
      context:
        type: "string"
        description: "Pass in the context for the dockerfile. This is optional."
      dockerfile_path:
        type: "string"
        description: "Path to a dockerfile. You can only specify this or subdirectory."
    description: "Description of a new repository build."
    example:
      archive_url: "archive_url"
      file_id: "file_id"
      context: "context"
      docker_tags:
      - "docker_tags"
      - "docker_tags"
      dockerfile_path: "dockerfile_path"
      subdirectory: "subdirectory"
      pull_robot: "pull_robot"
  NewToken:
    type: "object"
    required:
    - "friendlyName"
    properties:
      friendlyName:
        type: "string"
        description: "Friendly name to help identify the token"
    description: "Description of a new token."
    example:
      friendlyName: "friendlyName"
  ChangeTag:
    type: "object"
    description: "Makes changes to a specific tag"
  UserPermission:
    type: "object"
    required:
    - "role"
    properties:
      role:
        type: "string"
        description: "Role to use for the user"
        enum:
        - "read"
        - "write"
        - "admin"
    description: "Description of a user permission."
    example:
      role: "read"
  NewStarredRepository:
    type: "object"
    required:
    - "namespace"
    - "repository"
    properties:
      namespace:
        type: "string"
        description: "Namespace in which the repository belongs"
      repository:
        type: "string"
        description: "Repository name"
    example:
      namespace: "namespace"
      repository: "repository"
  UpdateUser:
    type: "object"
    properties:
      username:
        type: "string"
        description: "The user's username"
      family_name:
        type: "string"
        description: "The optional entered family name for the user"
      given_name:
        type: "string"
        description: "The optional entered given name for the user"
      invoice_email:
        type: "boolean"
        description: "Whether the user desires to receive an invoice email."
      company:
        type: "string"
        description: "The optional entered company for the user"
      password:
        type: "string"
        description: "The user's password"
      email:
        type: "string"
        description: "The user's email address"
      tag_expiration_s:
        type: "integer"
        description: "The number of seconds for tag expiration"
        minimum: 0
    description: "Fields which can be updated in a user."
  BuildTriggerActivateRequest:
    type: "object"
    required:
    - "config"
    properties:
      pull_robot:
        type: "string"
        description: "The name of the robot that will be used to pull images."
      config:
        type: "object"
        description: "Arbitrary json."
        properties: {}
    example:
      config: "{}"
      pull_robot: "pull_robot"
  UpdateApp:
    type: "object"
    required:
    - "application_uri"
    - "name"
    - "redirect_uri"
    properties:
      redirect_uri:
        type: "string"
        description: "The URI for the application's OAuth redirect"
      avatar_email:
        type: "string"
        description: "The e-mail address of the avatar to use for the application"
      name:
        type: "string"
        description: "The name of the application"
      application_uri:
        type: "string"
        description: "The URI for the application's homepage"
      description:
        type: "string"
        description: "The human-readable description for the application"
    description: "Description of an updated application."
    example:
      application_uri: "application_uri"
      avatar_email: "avatar_email"
      name: "name"
      description: "description"
      redirect_uri: "redirect_uri"
  ChangeVisibility:
    type: "object"
    required:
    - "visibility"
    properties:
      visibility:
        type: "string"
        description: "Visibility which the repository will start with"
        enum:
        - "public"
        - "private"
    description: "Change the visibility for the repository."
    example:
      visibility: "public"
  TeamDescription:
    type: "object"
    required:
    - "role"
    properties:
      role:
        type: "string"
        description: "Org wide permissions that should apply to the team"
        enum:
        - "member"
        - "creator"
        - "admin"
      description:
        type: "string"
        description: "Markdown description for the team"
    description: "Description of a team"
    example:
      role: "member"
      description: "description"
  NewOrg:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        description: "Organization username"
      email:
        type: "string"
        description: "Organization contact email"
    description: "Description of a new organization."
    example:
      name: "name"
      email: "email"
  NewPrototype:
    type: "object"
    required:
    - "delegate"
    - "role"
    properties:
      activating_user:
        $ref: "#/definitions/NewPrototype_activating_user"
      role:
        type: "string"
        description: "Role that should be applied to the delegate"
        enum:
        - "read"
        - "write"
        - "admin"
      delegate:
        $ref: "#/definitions/NewPrototype_delegate"
    description: "Description of a new prototype"
    example:
      delegate:
        kind: "user"
        name: "name"
      role: "read"
      activating_user:
        name: "name"
  TokenPermission:
    type: "object"
    required:
    - "role"
    properties:
      role:
        type: "string"
        description: "Role to use for the token"
        enum:
        - "read"
        - "write"
        - "admin"
    description: "Description of a token permission"
    example:
      role: "read"
  RunParameters:
    type: "object"
    properties:
      branch_name:
        type: "string"
        description: "(SCM only) If specified, the name of the branch to build."
      commit_sha:
        type: "string"
        description: "(Custom Only) If specified, the ref/SHA1 used to checkout a\
          \ git repository."
    description: "Optional run parameters for activating the build trigger"
    example:
      commit_sha: "commit_sha"
      branch_name: "branch_name"
  RepoUpdate:
    type: "object"
    required:
    - "description"
    properties:
      description:
        type: "string"
        description: "Markdown encoded description for the repository"
    description: "Fields which can be updated in a repository."
    example:
      description: "description"
  NewRepo:
    type: "object"
    required:
    - "description"
    - "repository"
    - "visibility"
    properties:
      namespace:
        type: "string"
        description: "Namespace in which the repository should be created. If omitted,\
          \ the username of the caller is used"
      visibility:
        type: "string"
        description: "Visibility which the repository will start with"
        enum:
        - "public"
        - "private"
      repository:
        type: "string"
        description: "Repository name"
      description:
        type: "string"
        description: "Markdown encoded description for the repository"
    description: "Description of a new repository"
    example:
      visibility: "public"
      namespace: "namespace"
      description: "description"
      repository: "repository"
  ApiError:
    type: "object"
    required:
    - "status"
    - "title"
    - "type"
    properties:
      status:
        type: "integer"
        description: "Status code of the response."
      error_message:
        type: "string"
        description: "Deprecated; alias for detail"
      title:
        type: "string"
        description: "Unique error code to identify the type of error."
      error_type:
        type: "string"
        description: "Deprecated; alias for detail"
      detail:
        type: "string"
        description: "Details about the specific instance of the error."
      type:
        type: "string"
        description: "Reference to the type of the error."
  CreateMessage:
    type: "object"
    properties:
      message:
        $ref: "#/definitions/CreateMessage_message"
    description: "Create a new message"
    example:
      message:
        severity: "info"
        media_type: "text/plain"
        content: "content"
  RestoreTag:
    type: "object"
    required:
    - "image"
    properties:
      image:
        type: "string"
        description: "Image identifier to which the tag should point"
      manifest_digest:
        type: "string"
        description: "If specified, the manifest digest that should be used"
    description: "Restores a tag to a specific image"
    example:
      image: "image"
      manifest_digest: "manifest_digest"
  ApiErrorDescription:
    type: "object"
    required:
    - "description"
    - "title"
    - "type"
    properties:
      type:
        type: "string"
        description: "A reference to the error type resource"
      description:
        type: "string"
        description: "A more detailed description of the error that may include help\
          \ for fixing the issue."
      title:
        type: "string"
        description: "The title of the error. Can be used to uniquely identify the\
          \ kind of error."
        enum:
        - "downstream_issue"
        - "exceeds_license"
        - "expired_token"
        - "external_service_timeout"
        - "fresh_login_required"
        - "insufficient_scope"
        - "invalid_request"
        - "invalid_response"
        - "invalid_token"
        - "not_found"
    description: "Description of an error"
    example:
      description: "description"
      type: "type"
      title: "downstream_issue"
  PrototypeUpdate:
    type: "object"
    required:
    - "role"
    properties:
      role:
        type: "string"
        description: "Role that should be applied to the permission"
        enum:
        - "read"
        - "write"
        - "admin"
    description: "Description of a the new prototype role"
    example:
      role: "read"
  NewApp:
    type: "object"
    required:
    - "name"
    properties:
      redirect_uri:
        type: "string"
        description: "The URI for the application's OAuth redirect"
      avatar_email:
        type: "string"
        description: "The e-mail address of the avatar to use for the application"
      name:
        type: "string"
        description: "The name of the application"
      application_uri:
        type: "string"
        description: "The URI for the application's homepage"
      description:
        type: "string"
        description: "The human-readable description for the application"
    description: "Description of a new organization application."
    example:
      application_uri: "application_uri"
      avatar_email: "avatar_email"
      name: "name"
      description: "description"
      redirect_uri: "redirect_uri"
  UpdateOrg:
    type: "object"
    properties:
      invoice_email:
        type: "boolean"
        description: "Whether the organization desires to receive emails for invoices"
      email:
        type: "string"
        description: "Organization contact email"
      tag_expiration_s:
        type: "integer"
        description: "The number of seconds for tag expiration"
        minimum: 0
    description: "Description of updates for an existing organization"
    example:
      invoice_email: true
      tag_expiration_s: 0
      email: "email"
  NotificationCreateRequest:
    type: "object"
    required:
    - "config"
    - "event"
    - "eventConfig"
    - "method"
    properties:
      eventConfig:
        type: "object"
        description: "JSON config information for the specific event of notification"
        properties: {}
      title:
        type: "string"
        description: "The human-readable title of the notification"
      config:
        type: "object"
        description: "JSON config information for the specific method of notification"
        properties: {}
      event:
        type: "string"
        description: "The event on which the notification will respond"
      method:
        type: "string"
        description: "The method of notification (such as email or web callback)"
    description: "Information for creating a notification on a repository"
    example:
      eventConfig: "{}"
      method: "method"
      title: "title"
      event: "event"
      config: "{}"
  NewUser:
    type: "object"
    required:
    - "password"
    - "username"
    properties:
      username:
        type: "string"
        description: "The user's username"
      password:
        type: "string"
        description: "The user's password"
      email:
        type: "string"
        description: "The user's email address"
      invite_code:
        type: "string"
        description: "The optional invite code"
      recaptcha_response:
        type: "string"
        description: "The (may be disabled) recaptcha response code for verification"
    description: "Fields which must be specified for a new user."
  AddLabel:
    type: "object"
    required:
    - "key"
    - "value"
    properties:
      value:
        type: "string"
        description: "The value for the label"
      key:
        type: "string"
        description: "The key for the label"
    description: "Adds a label to a manifest"
    example:
      value: "value"
      key: "key"
  ChangeRepoTrust:
    type: "object"
    required:
    - "trust_enabled"
    properties:
      trust_enabled:
        type: "boolean"
        description: "Whether or not signing is enabled for the repository."
    description: "Change the trust settings for the repository."
    example:
      trust_enabled: true
  UserView:
    type: "object"
    required:
    - "anonymous"
    - "avatar"
    properties:
      organizations:
        type: "array"
        description: "Information about the organizations in which the user is a member"
        items:
          type: "object"
          properties: {}
      verified:
        type: "boolean"
        description: "Whether the user's email address has been verified"
      avatar:
        type: "object"
        description: "Avatar data representing the user's icon"
        properties: {}
      anonymous:
        type: "boolean"
        description: "true if this user data represents a guest user"
      logins:
        type: "array"
        description: "The list of external login providers against which the user\
          \ has authenticated"
        items:
          type: "object"
          properties: {}
      can_create_repo:
        type: "boolean"
        description: "Whether the user has permission to create repositories"
      preferred_namespace:
        type: "boolean"
        description: "If true, the user's namespace is the preferred namespace to\
          \ display"
      email:
        type: "string"
        description: "The user's email address"
    description: "Describes a user"
    example:
      can_create_repo: true
      organizations:
      - "{}"
      - "{}"
      verified: true
      anonymous: true
      avatar: "{}"
      logins:
      - "{}"
      - "{}"
      email: "email"
      preferred_namespace: true
  TeamPermission:
    type: "object"
    required:
    - "role"
    properties:
      role:
        type: "string"
        description: "Role to use for the team"
        enum:
        - "read"
        - "write"
        - "admin"
    description: "Description of a team permission."
    example:
      role: "read"
  NewPrototype_activating_user:
    required:
    - "name"
    properties:
      name:
        type: "string"
        description: "The username for the activating_user"
    description: "Repository creating user to whom the rule should apply"
    example:
      name: "name"
  NewPrototype_delegate:
    required:
    - "kind"
    - "name"
    properties:
      kind:
        type: "string"
        description: "Whether the delegate is a user or a team"
        enum:
        - "user"
        - "team"
      name:
        type: "string"
        description: "The name for the delegate team or user"
    description: "Information about the user or team to which the rule grants access"
    example:
      kind: "user"
      name: "name"
  CreateMessage_message:
    required:
    - "content"
    - "media_type"
    - "severity"
    properties:
      content:
        type: "string"
        description: "The actual message"
      media_type:
        type: "string"
        description: "The media type of the message"
        enum:
        - "text/plain"
        - "text/markdown"
      severity:
        type: "string"
        description: "The severity of the message"
        enum:
        - "info"
        - "warning"
        - "error"
    description: "A single message"
    example:
      severity: "info"
      media_type: "text/plain"
      content: "content"
